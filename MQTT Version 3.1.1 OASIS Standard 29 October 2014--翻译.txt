MQTT Version 3.1.1 OASIS Standard 29 October 2014
翻译：Jimmy Huang

##当前版本
	http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.doc (基础版)
	http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html
	http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.pdf

##前一个版本
	http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/cos01/mqtt-v3.1.1-cos01.doc (Authoritative)
	http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/cos01/mqtt-v3.1.1-cos01.html
	http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/cos01/mqtt-v3.1.1-cos01.pdf

##最新版本
	http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.doc (Authoritative)
	http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html
	http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.pdf

##技术委员会
	OASIS Message Queuing Telemetry Transport (MQTT) TC

##主席
	Raphael J Cohn (raphael.cohn@stormmq.com), Individual
	Richard J Coppen (coppen@uk.ibm.com), IBM

##作者
	Andrew Banks (Andrew_Banks@uk.ibm.com), IBM
	Rahul Gupta (rahul.gupta@us.ibm.com), IBM

##相关著作
	本标准参考:
	·MQTT and the NIST Cybersecurity Framework Version 1.0. Edited by Geoff Brown and Louis-Philippe Lamoureux. Latest version: http://docs.oasis-open.org/mqtt/mqtt-nist-cybersecurity/v1.0/mqtt-nist-cybersecurity-v1.0.html.

##摘要
MQTT基于CS模式，使用发布订阅消息传输。
它轻量级、开放、简单和容易实现。
这些特征让它有很多切合的场合，包括M2M(machine to machine)通信和IoT(Internet of Things)，这些场景是代码容量小和需要额外的网络带宽。

本协议基于TCP/IP，或者其他提供顺序的、少丢失、双向的连接网络协议。它包括以下特征：

--使用发布订阅消息模式，而此模式提供一对多的分布式和解耦的应用
--消息传输层不需要知道有效负载的内容(A messaging transport that is agnostic to the content of the payload.)
--三种质量的消息传输服务：
	--“最多一次At most once”，消息根据操作环境尽最大努力传输。
	消息丢失允许发生。
	这个等级可以用在环境传感器数据传输，它不关心某一次数据读取的丢失，很快下一次又会被采集和发布。
	--“至少一次At least once”，消息保证传输到达，但允许重复传输。
	--“有且只有一次Exactly once”，消息保证一次传输到达。这个等级可以用在计费系统，消息重复或者丢失都会引起不正确的费用统计。
--用小的传输头和交换数据协议来减少网络负荷
--拥有一种机制，可以在非正常连接或断线的时候通知相互有连接部分

##状态



##目录
1 介绍
	1.1 MQTT组织
	1.2 术语
	1.3 标准引用
	1.4 非标准引用
	1.5 数据模型
		1.5.1 Bits
		1.5.2 整型
		1.5.3 UTF-8编码字符
	1.6 编辑规则
2 MQTT控制报文格式
	2.1 MQTT的控制报文结构体
	2.2 固定头
		2.2.1 MQTT控制报文类型
		2.2.2 标记(Flags)
		2.2.3 剩余长度
	2.3 变量头	
		2.3.1 报文标识符
	2.4 Payload
3 MQTT控制报文
	3.1 连接CONNECT--客户端请求服务器的连接
	3.2 CONNACK--确认连接请求
	3.3 PUBLISH--发布消息
	3.4 PUBACK--发布确认
	3.5 PUBREC--发布接收(Qos2发布接收,part1)
	3.6 PUBREL--发布版本(Qos2发布接收,part2)
	3.7 PUBCOMP--发布完成(Qos2发布接收,part3)
	3.8 SUBSCRIBE-订阅主题
	3.9 SUBACK--订阅确认
	3.10 UNSUBSCRIBE--取消订阅主题
	3.11 UNSUBACK--取消订阅确认
	3.12 PINGREQ--PING请求
	3.13 PINGRESP--PING响应
	3.14 DISCONNECT--断开连接通知
4 操作行为
	4.1 状态保存
		4.1.1 非标准例子
	4.2 网络连接
	4.3 服务质量等级和协议流程
		4.3.1 QoS 0: At most once 传输
		4.3.2 QoS 1: At least once 传输
		4.3.3 QoS 2: Exactly once 传输
	4.4 消息传输重试
	4.5 消息接收
	4.6 消息排序Message ordering
	4.7 主题名字和过滤
		4.7.1 主题通配符wildcards
		4.7.2 主题开始符：$
		4.7.3 主题语义和用法
	4.8 错误处理
5 安全
	5.1 介绍
	5.2 MQTT解决方案：安全和认证
	5.3 轻量级加密和受限设备(cryptography and constrained devices)
	5.4 实现注意事项
		5.4.1 客户端从服务器进行身份认证Authentication
		5.4.2 客户端从服务器进行授权Authorization
		5.4.3 服务器从客户端进行身份认证
		5.4.4 完整的应用消息和控制报文
		5.4.5 私密的应用消息和控制报文
		5.4.6 不可抵赖的消息传输Non-repudiation of message transmission
		5.4.7 客户端和服务器的探测妥协Detecting compromise
		5.4.8 探测异常行为
		5.4.9 其他安全考虑
		5.4.10 SOCKS的使用
		5.4.11 安全配置
6 使用WebSocket当做网络传输
	6.1 IANA注意事项
7 一致性
	7.1 一致性目标
		7.1.1 MQTT服务器
		7.1.2 MQTT客户端
附件 A 确认(非规范性)
附件 B 强制规范性陈述(非规范性)
附件 C 修订历史(非规范性)



###1 介绍
##1.1 MQTT组织
	本说明由下面七个章节组成：
		1 介绍
		2 MQTT控制报文格式
		3 MQTT控制报文
		4 操作行为
		5 安全
		6 使用WebSocket当做网络传输
		7 一致性

##1.2 术语
	本说明使用的关键词 "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" 在IETF RFC 2119有详细解释描述。

网络连接：
	网络连接就是MQTT的底层传输协议构造器construct。具备以下两点：
		--可以连接客户端到服务器。
		--提供按顺序的、无损的、双向字节流的手段
	例子参看4.2节。

应用消息：
	应用消息就是通过MQTT协议通过网络传输的应用。其中通过MQTT传输的应用消息会有一个传输服务质量要求和主题名字Topic Name。

客户端：
	客户端就是使用MQTT的程序或者设备。客户端往往与服务器建立网络连接。它可以：
		--发布应用消息给其他对其感兴趣的客户端
		--请求订阅并接收其感兴趣的应用消息
		--取消订阅其请求的应用消息
		--断开与服务器的连接(主动断开还是被动断开？)

服务器：
	服务器就是起客户端相互发布和订阅的中间媒介。服务器报文括：
		--接收来自多个客户端的网络连接
		--接收来自多个客户端的多个应用消息
		--处理来自客户端的订阅和取消订阅请求
		--转发符合客户订阅的应用程序消息

订阅Subscription：
	一个订阅报文含一个主题过滤器Topic Filter和一个最大的QoS。
	一个订阅与一个单独的会话关联。一个会话可以包含多个订阅。每一个订阅及会话有不同的主题过滤器。

主题名字Topic Name：
	服务器用来分辨不同客户端应用消息的标签。服务器会发送一份应用消息的备份到匹配的订阅端。

主题过滤器Topic Filter：
	订阅中的表达式，用来指明感兴趣的一个或多个标签。一个Topic Filter客户包含多个通配符。

会话Session：
	客户端和服务器间有状态的相互连接。有些会话只维持在网络连接中，有些会跨多个网络连接。(Network Connections指什么？)

MQTT控制报文 control packet：
	一种用来在网络连接中发送的信息包。MQTT说明定义了十四种不同的控制报文，其中发布报文用来传递应用消息。


##1.3 标准引用
[RFC2119]
Bradner, S., "Key words for use in RFCs to Indicate Requirement Levels", BCP 14, RFC 2119, March 1997.
http://www.ietf.org/rfc/rfc2119.txt

[RFC3629]
Yergeau, F., "UTF-8, a transformation format of ISO 10646", STD 63, RFC 3629, November 2003 
http://www.ietf.org/rfc/rfc3629.txt

[RFC5246]
Dierks, T. and E. Rescorla, "The Transport Layer Security (TLS) Protocol Version 1.2", RFC 5246, August 2008.
http://www.ietf.org/rfc/rfc5246.txt

[RFC6455]
Fette, I. and A. Melnikov, "The WebSocket Protocol", RFC 6455, December 2011.
http://www.ietf.org/rfc/rfc6455.txt

[Unicode]
The Unicode Consortium. The Unicode Standard.
http://www.unicode.org/versions/latest/



##1.4 非标准引用
[RFC793]
Postel, J. Transmission Control Protocol. STD 7, IETF RFC 793, September 1981.
http://www.ietf.org/rfc/rfc793.txt

[AES]
Advanced Encryption Standard (AES) (FIPS PUB 197).
http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf

[DES]
Data Encryption Standard (DES).
http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf

[FIPS1402]
Security Requirements for Cryptographic Modules (FIPS PUB 140-2)
http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf

[IEEE 802.1AR]
IEEE Standard for Local and metropolitan area networks - Secure Device Identity
http://standards.ieee.org/findstds/standard/802.1AR-2009.html

[ISO29192]
ISO/IEC 29192-1:2012 Information technology -- Security techniques -- Lightweight cryptography -- Part 1: General
http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=56425

[MQTT NIST]
MQTT supplemental publication, MQTT and the NIST Framework for Improving Critical Infrastructure Cybersecurity
http://docs.oasis-open.org/mqtt/mqtt-nist-cybersecurity/v1.0/mqtt-nist-cybersecurity-v1.0.html

[MQTTV31]
MQTT V3.1 Protocol Specification.
http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html

[NISTCSF]
Improving Critical Infrastructure Cybersecurity Executive Order 13636 http://www.nist.gov/itl/upload/preliminary-cybersecurity-framework.pdf

[NIST7628]
NISTIR 7628 Guidelines for Smart Grid Cyber Security
http://www.nist.gov/smartgrid/upload/nistir-7628_total.pdf

[NSAB]
NSA Suite B Cryptography
http://www.nsa.gov/ia/programs/suiteb_cryptography/

[PCIDSS]
PCI-DSS Payment Card Industry Data Security Standard
https://www.pcisecuritystandards.org/security_standards/

[RFC1928]
Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D., and L. Jones, "SOCKS Protocol Version 5", RFC 1928, March 1996. 
http://www.ietf.org/rfc/rfc1928.txt

[RFC4511]
Sermersheim, J., Ed., "Lightweight Directory Access Protocol (LDAP): The Protocol", RFC 4511, June 2006.
http://www.ietf.org/rfc/rfc4511.txt

[RFC5077]
Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig, "Transport Layer Security (TLS) Session Resumption without Server-Side State", RFC 5077, January 2008.
http://www.ietf.org/rfc/rfc5077.txt

[RFC5280]
Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., and W. Polk, "Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile", RFC 5280, May 2008.
http://www.ietf.org/rfc/rfc5280.txt

[RFC6066]
Eastlake 3rd, D., "Transport Layer Security (TLS) Extensions: Extension Definitions", RFC 6066, January 2011. 
http://www.ietf.org/rfc/rfc6066.txt 

[RFC6749]
Hardt, D., Ed., "The OAuth 2.0 Authorization Framework", RFC 6749, October 2012.
http://www.ietf.org/rfc/rfc6749.txt

[RFC6960]
Santesson, S., Myers, M., Ankney, R., Malpani, A., Galperin, S., and C. Adams, "X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP", RFC 6960, June 2013.
http://www.ietf.org/rfc/rfc6960.txt

[SARBANES]
Sarbanes-Oxley Act of 2002.
http://www.gpo.gov/fdsys/pkg/PLAW-107publ204/html/PLAW-107publ204.htm

[USEUSAFEHARB]
U.S.-EU Safe Harbor
http://export.gov/safeharbor/eu/eg_main_018365.asp


##1.5 数据模型
#1.5.1 Bits
	Bits把一个byte分为0到7。最大的是7，最小的是0。

#1.5.2 整型
	整型变量就是16bit的大端序列：大的序号在小
	的序号前面。也就是说，16bit组成的Word在网络中先传输高位Most Significant Byte (MSB)，再传输低位Least Significant Byte (LSB)

#1.5.3 UTF-8编码字符
	控制报文的文本区域使用UTF-8进行编码。UTF-8在Unicode字符编码，比ASCII字符编码更有效。

	每一个字符串有两byte来说明UTF-8编码其本身的长度。如插图Figure 1.1 Structure of UTF-8 encoded strings。因此，说明一个UTF-8编码的字符都有一个最大的字符数量：65535bytes。


	Figure 1.1 Structure of UTF-8 encoded strings
	Bit	7	6	5	4	3	2	1	0
	byte 1	String length MSB
	byte 2	String length LSB
	byte 3 ….	UTF-8 Encoded Character Data, if length > 0.

	在以UTF-8编码的字符串中，必须使用合乎UTF-8编码说明规范,在RFC 3629中有说明。特别注意，编码不能包含从U+D800到U+DFFF间的码。如果客户端或者服务器的控制报文不符合UTF-8格式，网络连接必须断开。

	UTF-8编码字符禁止包含空字符U+0000。如果接收到一个控制报文包含U+0000必须关闭网络连接。

	数据应该不包含下表列出的编码单元(code points)。如果接收(客户端或者服务器)到下面的编码，可以断开网络连接：
	U+0001..U+001F 控制字符
	U+007F..U+009F 控制字符

	如UTF-8编码顺序: 0xEF 0xBB 0xBF通常被解释为U+FEFF("0没有留空格")。它都禁止被接收器忽略。
	(A UTF-8 encoded sequence 0xEF 0xBB 0xBF is always to be interpreted to mean U+FEFF ("ZERO WIDTH NO-BREAK SPACE") 没明白！！！)

#1.5.3.1 非标准例子
	e.g: 字符"A𪛔"是一个LATIN CAPITAL字符，"A"后面跟着编码单元U+2A6D4(代表CJK IDEOGRAPH EXTENSION B字符)，其编码如下：

	Figure 1.2 UTF-8 encoded string non normative example
	Bit	7	6	5	4	3	2	1	0
	byte 1	String Length MSB (0x00)
		0	0	0	0	0	0	0	0
	byte 2	String Length LSB (0x05)
		0	0	0	0	0	1	0	1
	byte 3	‘A’ (0x41)
		0	1	0	0	0	0	0	1
	byte 4	(0xF0)
		1	1	1	1	0	0	0	0
	byte 5	(0xAA)
		1	0	1	0	1	0	1	0
	byte 6	(0x9B)
		1	0	0	1	1	0	1	1
	byte 7	(0x94)
		1	0	0	1	0	1	0	0


#1.6 文档编辑惯例
	本说明中，高亮的黄色文本是一致性说明。每一个一致性说明都包含一个参考reference格式[MQTT-x.x.x-y]。

###2 MQTT控制报文格式
##2.1 MQTT的控制报文结构体
	MQTT协议是通过交换一系列MQTT控制报文进行工作。本节将介绍这些报文的格式。

	一个MQTT控制报文包括三个部分，通常由以下序列组成：
	Figure 2.1 – Structure of an MQTT Control Packet
	Fixed header, present in all MQTT Control Packets
	Variable header, present in some MQTT Control Packets
	Payload, present in some MQTT Control Packets

##2.2 固定头
	每一个MQTT控制报文都包括一个固定的头。表2.2说明固定头的格式。

	Figure 2.2 - Fixed header format
	Bit		7	6	5	4				3	2	1	0
	byte 1	MQTT Control Packet type	Flags specific to each MQTT Control Packet type
	byte 2…	Remaining Length

#2.2.1 MQTT控制报文类型
	位置：byte 1, bits 7-4
	有4个bit组成的无符号变量表示：
	Table 2.1 - Control packet types
	Name	Value	Direction of flow	Description
	Reserved	0	Forbidden	Reserved
	CONNECT		1	Client to Server	Client request to connect to Server
	CONNACK		2	Server to Client	Connect acknowledgment
	PUBLISH		3	Client to Server
		          			or
					Server to Client	Publish message
	PUBACK		4	Client to Server
					          or
					Server to Client 	Publish acknowledgment
	PUBREC		5	Client to Server
					          or
					Server to Client 	Publish received (assured delivery part 1)
	PUBREL		6	Client to Server
					          or
					Server to Client 	Publish release (assured delivery part 2)
	PUBCOMP		7	Client to Server
					          or
					Server to Client 	Publish complete (assured delivery part 3)
	SUBSCRIBE	8	Client to Server	Client subscribe request
	SUBACK		9	Server to Client	Subscribe acknowledgment
	UNSUBSCRIBE	10	Client to Server	Unsubscribe request
	UNSUBACK	11	Server to Client	Unsubscribe acknowledgment
	PINGREQ		12	Client to Server	PING request
	PINGRESP	13	Server to Client	PING response
	DISCONNECT	14	Client to Server	Client is disconnecting
	Reserved	15	Forbidden	Reserved


#2.2.2 标志(Flags)
	在控制报文的固定头的第一个byte的0~3bit，就是标志Flag。
	在表格2.2中有一些标志位保留的flag，还有其他的必须是表格里面的值 [MQTT-2.2.2-1]。
	如果接收到不正确flag，必须关闭网络连接[MQTT-2.2.2-2]。在4.8节中有详细的错误处理介绍。

	 Table 2.2 - Flag Bits
	Control Packet	Fixed header flags	Bit 3	Bit 2	Bit 1	Bit 0
	CONNECT	Reserved	0	0	0	0
	CONNACK	Reserved	0	0	0	0
	PUBLISH	Used in MQTT 3.1.1	DUP1	QoS2	QoS2	RETAIN3
	PUBACK	Reserved	0	0	0	0
	PUBREC	Reserved	0	0	0	0
	PUBREL	Reserved	0	0	1	0
	PUBCOMP	Reserved	0	0	0	0
	SUBSCRIBE	Reserved	0	0	1	0
	SUBACK	Reserved	0	0	0	0
	UNSUBSCRIBE	Reserved	0	0	1	0
	UNSUBACK	Reserved	0	0	0	0
	PINGREQ	Reserved	0	0	0	0
	PINGRESP	Reserved	0	0	0	0
	DISCONNECT	Reserved	0	0	0	0

	DUP1       	=PUBLISH格式重复传输标志 Duplicate delivery of a PUBLISH Control Packet
	QoS2       	=PUBLISH的传输质量服务 PUBLISH Quality of Service
	RETAIN3 	=PUBLISH的保持标志 PUBLISH Retain flag 
	详看3.3.1节。

#2.2.3 剩余长度
	位置：第二个byte起

	剩余长度包括变量头和payload。剩余长度不包括用来编码的剩余长度。(怎么理解？)

	Table 2.4 Size of Remaining Length field
	Digits	From	To
	1	0 (0x00)	127 (0x7F)
	2	128 (0x80, 0x01)	16 383 (0xFF, 0x7F)
	3	16 384 (0x80, 0x80, 0x01)	2 097 151 (0xFF, 0xFF, 0x7F)
	4	2 097 152 (0x80, 0x80, 0x80, 0x01)	268 435 455 (0xFF, 0xFF, 0xFF, 0x7F)

	Non normative comment
	编码算法
	The algorithm for encoding a non negative integer (X) into the variable length encoding scheme is as follows:
	               do
	              encodedByte = X MOD 128
	              X = X DIV 128
	             // if there are more data to encode, set the top bit of this byte
	             if ( X > 0 )
	                 encodedByte = encodedByte OR 128
	             endif
	                 'output' encodedByte
	        while ( X > 0 )

	Where MOD is the modulo operator (% in C), DIV is integer division (/ in C), and OR is bit-wise or (| in C).

	Non normative comment
	解码算法
	The algorithm for decoding the Remaining Length field is as follows:

	       multiplier = 1
	       value = 0
	       do
	            encodedByte = 'next byte from stream'
	            value += (encodedByte AND 127) * multiplier
	            multiplier *= 128
	            if (multiplier > 128*128*128)
	               throw Error(Malformed Remaining Length)
	       while ((encodedByte AND 128) != 0)

	where AND is the bit-wise and operator (& in C).

	When this algorithm terminates, value contains the Remaining Length value.

##2.3 变量头
	有些MQTT控制报文包括变量头部分。它在固定报文头以及payload中间。
	它的内容根据报文类型而不同。
	其中报文标识(Packet Identifer)在有些控制报文类型中比较常见。

#2.3.1 报文标识符
	Figure 2.3 - Packet Identifier bytes
	Bit	7	6	5	4	3	2	1	0
	byte 1	Packet Identifier MSB
	byte 2	Packet Identifier LSB

	以下类型的控制报文类型包含2bytes的报文Packet Identifer: 
	PUBLISH (where QoS > 0), PUBACK, PUBREC, PUBREL, PUBCOMP, SUBSCRIBE, SUBACK, UNSUBSCRIBE, UNSUBACK.

	其中SUBSCRIBE, UNSUBSCRIBE, 和 PUBLISH (in cases where QoS > 0)的控制报文必须包含一个非零的16bitPacket Identifer。
	每当客户端发送一个新的上面类型的报文，都需要分配一个新的Packet Identifer。
	如果一个客户端重新发送一个特别的控制报文，则它必须使用相同的的Packet Identifer在后面的重新发送。
	Packet Identifer在客户端被正确响应之后可以被重用。
	当在QoS 1 PUBLISH 相当于PUBACK；在QoS 2 相当于PUBCOMP。对于SUBSCRIBE或者UNSUBSCRIBE，相当于SUBACK或者UNSUBACK。
	对于服务器来说，相同的条件就是发送一个QoS>0的PUBLISH报文。

	一个PUBLISH报文，当QoS为0时，禁止包含Packet Identifer。

	一个PUBACK、PUBREC 或者PUBREL报文必须包含相同的一开始由PUBLISH报文发出的Packet Identifer。
	类似的SUBACK和UNSUBACK必须包含SUBSCRIBE和UNSUBSCRIBE报文使用的Packet Identifer。

	其中，需要使用Packet Identifer的控制报文见表2.5。

	Table 2.5 - Control Packets that contain a Packet Identifier
	Control Packet	Packet Identifier field
	CONNECT	NO
	CONNACK	NO
	PUBLISH	YES (If QoS > 0)
	PUBACK	YES
	PUBREC	YES
	PUBREL	YES
	PUBCOMP	YES
	SUBSCRIBE	YES
	SUBACK	YES
	UNSUBSCRIBE	YES
	UNSUBACK	YES
	PINGREQ	NO
	PINGRESP	NO
	DISCONNECT	NO

	客户端和服务器分配独立的Packet Identifer，他们之间使用相同的Packet Identifer进行消息传输。

	非标准说明：
	其允许同时客户端和服务器同时发送相同搞得Packet Identifer 0x1234来进行PUBLISH。
	同时双发用相同的0x1234来回应。
   Client                     Server
   PUBLISH Packet Identifier=0x1234---
   --PUBLISH Packet Identifier=0x1234
   PUBACK Packet Identifier=0x1234---
   --PUBACK Packet Identifier=0x1234

##2.4 Payload
	在第三章有介绍关于Payload报文的。在表2.6说明需要使用payload的报文类型。
	Table 2.6 - Control Packets that contain a Payload
	Control Packet	Payload
	CONNECT	Required
	CONNACK	None
	PUBLISH	Optional
	PUBACK	None
	PUBREC	None
	PUBREL	None
	PUBCOMP	None
	SUBSCRIBE	Required
	SUBACK	Required
	UNSUBSCRIBE	Required
	UNSUBACK	None
	PINGREQ	None
	PINGRESP	None
	DISCONNECT	None

###3 MQTT控制报文
##3.1 连接CONNECT--客户端请求服务器的连接


！！！！！！！！！！！！！！！！！！！！！
！  		这里补充3.1.1 				！
！！！！！！！！！！！！！！！！！！！！！

#3.1.2 变量头
	在CONNECT中的变量头包括四个部分：Protocol Name, Protocol Level, Connect Flags, 和keep Alive(最后只是什么？)。

#3.1.2.1 Protocol Name
	Figure 3.2 - Protocol Name bytes
	Description	7	6	5	4	3	2	1	0
	Protocol Name
	byte 1	Length MSB (0)	0	0	0	0	0	0	0	0
	byte 2	Length LSB (4)	0	0	0	0	0	1	0	0
	byte 3	‘M’	0	1	0	0	1	1	0	1
	byte 4	‘Q’	0	1	0	1	0	0	0	1
	byte 5	‘T’	0	1	0	1	0	1	0	0
	byte 6	‘T’	0	1	0	1	0	1	0	0

	Protocol name是一个UTF-8编码的“MQTT”大写字符。这个字符的长度和偏止不会因为版本号的更变而更变。

	如果Protocol Name不正确，服务器可能断开客户端的连接，或者可能继续根据其他说明文档处理CONNECT报文。但是，后一种情况，服务器根据本协议禁止继续处理CONNECT报文。

	非规范性说明:
		报文筛选者(如：防火墙)可以根据Protocol Name来表示MQTT的传输。

#3.1.2.2 协议等级Protocol Level
	Description			7	6	5	4	3	2	1	0
	Protocol Level
	byte 7	Level(4)	0	0	0	0	0	1	0	0

	使用一个8bit的无符号变量表示客户端使用的修订等级。其中现在使用的3.1.1的MQTT协议使用Protocol Level 0x04。
	服务器在接收到服务器本身不支持的Protocol Level时，必须回复带有码0x01(不接收的Protocol Level)的CONNACK给客户端。

#3.1.2.3 连接标志Connect Flags
	Connect Flags字节包含一些执行MQTT连接行为的标记参数。它同样指定payload是否存在。

	Figure 3.4 - Connect Flag bits
	Bit	7	6	5	4	3	2	1	0
		User Name Flag	Password Flag	Will Retain	Will QoS	Will Flag	Clean Session	Reserved
	byte 8	X	X	X	X	X	X	X	0

	服务器必须检查最后一位的Reserved flag是否为0，不为0则断开客户端的连接。

#3.1.2.4 
	位置：在Connect Flags byte的bit1 

	这个bit用来标记和处理会话Session的状态。

	服务器和客户端在Network Connections时，可以通过保存会话状态来使能连续的可靠消息传输。

	如果CleanSession设置为0，服务器根据当前的session，必须继续与客户端进行通讯。如果服务器没有与客户端关联的会话，必须重新建立一个新的会话。客户端和服务器在断开之后，必须保存会话。在断开连接后的会话，如果CleanSession设置为0，服务器必须保存之后能够匹配任意订阅客户端在断开时的QoS1和QoS2的消息。
	在遇到同样认证的时候，可能需要保存QoS0的消息

	如果CleanSession是1，客户端和服务器必须抛弃之前的会话，并建立一个新的会话。这个会话会在本次网络连接中保持。本次会话关联的状态数据，禁止与后来的会话重用。

	在客户端中的会话状态包括：
	--发送给服务器的QoS1和QoS2消息，但是还没有被完全确认。
	--从服务器接收的QoS2消息，但是还没有被晚却确认。
	(什么是完全确认？)

	在服务器的会话状态包括：
	--已经存在的会话，即使剩下的会话状态为空
	--客户端的订阅
	--发送给客户端，还没有被完全确认的QoS1和QoS2消息
	--阻塞发送给客户端的QoS1和QoS2消息
	--从客户端接收的还没有被完全确认的QoS2消息
	--可选择：阻塞的发送给客户端的QoS0消息

	


3.2 CONNACK--确认连接请求
3.3 PUBLISH--发布消息
3.4 PUBACK--发布确认
3.5 PUBREC--发布接收(Qos2发布接收,part1)
3.6 PUBREL--发布版本(Qos2发布接收,part2)
3.7 PUBCOMP--发布完成(Qos2发布接收,part3)
3.8 SUBSCRIBE-订阅主题
3.9 SUBACK--订阅确认
3.10 UNSUBSCRIBE--取消订阅主题
3.11 UNSUBACK--取消订阅确认
3.12 PINGREQ--PING请求
3.13 PINGRESP--PING响应
3.14 DISCONNECT--断开连接通知
4 操作行为
4.1 状态保存
4.1.1 非标准例子
4.2 网络连接
4.3 服务质量等级和协议流程
4.3.1 QoS 0: At most once 传输
4.3.2 QoS 1: At least once 传输
4.3.3 QoS 2: Exactly once 传输
4.4 消息传输重试
4.5 消息接收
4.6 消息排序Message ordering
4.7 主题名字和过滤
4.7.1 主题通配符wildcards
4.7.2 主题开始符：$
4.7.3 主题语义和用法
4.8 错误处理
5 安全
5.1 介绍
5.2 MQTT解决方案：安全和认证
5.3 轻量级加密和受限设备(cryptography and constrained devices)
5.4 实现注意事项
5.4.1 客户端从服务器进行身份认证Authentication
5.4.2 客户端从服务器进行授权Authorization
5.4.3 服务器从客户端进行身份认证
5.4.4 完整的应用消息和控制报文
5.4.5 私密的应用消息和控制报文
5.4.6 不可抵赖的消息传输Non-repudiation of message transmission
5.4.7 客户端和服务器的探测妥协Detecting compromise
5.4.8 探测异常行为
5.4.9 其他安全考虑
5.4.10 SOCKS的使用
5.4.11 安全配置
6 使用WebSocket当做网络传输
6.1 IANA注意事项
7 一致性
7.1 一致性目标
7.1.1 MQTT服务器
7.1.2 MQTT客户端
附件 A 确认(非规范性)
附件 B 强制规范性陈述(非规范性)
附件 C 修订历史(非规范性)


